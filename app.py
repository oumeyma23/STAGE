from flask import Flask, render_template, request, redirect, url_for, session, jsonify
from flask_mysqldb import MySQL
from werkzeug.security import generate_password_hash, check_password_hash
import pandas as pd
import cv2
import uuid
import os
import base64
from PIL import Image
from io import BytesIO
import traceback
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
from config_email import SMTP_CONFIG
import random
import string
import re
import secrets
import hashlib

try:
    from flask_babel import Babel, gettext, ngettext, get_locale
    BABEL_AVAILABLE = True
except ImportError:
    BABEL_AVAILABLE = False

try:
    from credit_prediction import CreditPredictor
    credit_predictor = CreditPredictor()
    CREDIT_PREDICTION_AVAILABLE = True
    print("‚úÖ Module de pr√©diction de cr√©dit charg√© avec succ√®s")
except ImportError as e:
    CREDIT_PREDICTION_AVAILABLE = False
    print(f"‚ö†Ô∏è Module de pr√©diction non disponible: {e}")
    
    # Cr√©er une classe mock pour √©viter les erreurs
    class MockCreditPredictor:
        def predict_credit_approval(self, form_data):
            return {
                'approved': True,
                'probability': 0.75,
                'risk_level': 'Moyen',
                'message': 'Analyse automatique non disponible - Demande enregistr√©e pour √©tude manuelle'
            }
    credit_predictor = MockCreditPredictor()

try:
    from extraction import extraire_donnees
    from AML import check_name
    from deepface import DeepFace
    ADDITIONAL_MODULES_AVAILABLE = True
    print("‚úÖ Modules d'extraction et AML charg√©s avec succ√®s")
except ImportError as e:
    ADDITIONAL_MODULES_AVAILABLE = False
    print(f"‚ö†Ô∏è Modules additionnels non disponibles: {e}")
    
    # Cr√©er des fonctions mock
    def extraire_donnees(path):
        return "12345678", "Doe", "John", "1990-01-01"
    
    def check_name(name):
        return pd.DataFrame()  # DataFrame vide = pas de match AML

app = Flask(__name__)
app.secret_key = 'secret_key'
app.config['SHOW_RESET_LINK_DEBUG'] = True  # Mode dev: afficher le lien directement apr√®s envoi

# Configuration Babel
app.config['LANGUAGES'] = {
    'en': 'English',
    'fr': 'Fran√ßais', 
    'ar': 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©'
}

def get_locale():
    # 1. Si l'utilisateur a choisi une langue, l'utiliser
    if 'language' in session:
        return session['language']
    # 2. Sinon, utiliser la langue pr√©f√©r√©e du navigateur
    return request.accept_languages.best_match(app.config['LANGUAGES'].keys()) or 'fr'

if BABEL_AVAILABLE:
    app.config['BABEL_DEFAULT_LOCALE'] = 'fr'
    app.config['BABEL_DEFAULT_TIMEZONE'] = 'UTC'
    babel = Babel(app, locale_selector=get_locale)

# üîó Connexion √† MySQL
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = ''
app.config['MYSQL_DB'] = 'stagee'

mysql = MySQL(app)

UPLOAD_FOLDER = 'static/uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Create password reset table if not exists (idempotent)
def _ensure_reset_table():
    try:
        cur = mysql.connection.cursor()
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS password_resets (
                id INT AUTO_INCREMENT PRIMARY KEY,
                email VARCHAR(255) NOT NULL,
                token_hash CHAR(64) NOT NULL,
                expires_at DATETIME NOT NULL,
                used TINYINT(1) NOT NULL DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                INDEX (email),
                INDEX (token_hash)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
            """
        )
        mysql.connection.commit()
        cur.close()
        print("‚úÖ Table password_resets v√©rifi√©e/cr√©√©e")
    except Exception as e:
        print(f"‚ö†Ô∏è Impossible de v√©rifier/cr√©er password_resets: {e}")

_ensure_reset_table()

# Route pour changer de langue
@app.route('/set_language/<language>')
def set_language(language=None):
    if language in app.config['LANGUAGES']:
        session['language'] = language
        print(f"üåê Langue chang√©e vers: {language}")
        print(f"üåê Session language: {session.get('language')}")
    return redirect(request.referrer or url_for('accueil'))

def envoyer_mail(destinataire, nom_complet):
    subject = "Refus de cr√©dit - SecuriBank"
    body = f"""
    Bonjour {nom_complet},

    Votre demande a √©t√© refus√©e car votre nom figure sur une liste de surveillance AML.

    Vous ne pouvez pas obtenir un cr√©dit pour le moment.

    Cordialement,
    SecuriBank
    """

    msg = MIMEMultipart()
    msg['From'] = SMTP_CONFIG['email']
    msg['To'] = destinataire
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))

    try:
        print(f"üîó Connexion au serveur SMTP {SMTP_CONFIG['server']}:{SMTP_CONFIG['port']}")
        server = smtplib.SMTP(SMTP_CONFIG['server'], SMTP_CONFIG['port'])
        server.set_debuglevel(1)  # Active le debug SMTP
        
        if SMTP_CONFIG['use_tls']:
            print("üîê Activation TLS...")
            server.starttls()
        
        print(f"üîë Authentification avec {SMTP_CONFIG['email']}")
        server.login(SMTP_CONFIG['email'], SMTP_CONFIG['password'])
        
        print(f"üì§ Envoi email vers {destinataire}")
        server.sendmail(SMTP_CONFIG['email'], destinataire, msg.as_string())
        server.quit()
        print("üì® Email envoy√© avec succ√®s.")
        return True
    except smtplib.SMTPAuthenticationError as e:
        print(f"‚ùå Erreur d'authentification SMTP: {e}")
        return False

# =======================
# Password reset utilities
# =======================
def _generate_reset_token():
    token = secrets.token_urlsafe(32)
    token_hash = hashlib.sha256(token.encode('utf-8')).hexdigest()
    return token, token_hash

def _save_reset_token(email, token_hash, ttl_minutes=60):
    try:
        cur = mysql.connection.cursor()
        # Invalidate previous tokens for this email
        cur.execute("UPDATE password_resets SET used=1 WHERE email=%s", (email,))
        expires_at = datetime.now() + timedelta(minutes=ttl_minutes)
        cur.execute(
            """
            INSERT INTO password_resets (email, token_hash, expires_at, used)
            VALUES (%s, %s, %s, 0)
            """,
            (email, token_hash, expires_at)
        )
        mysql.connection.commit()
        cur.close()
        return True
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde token reset: {e}")
        return False

def _verify_reset_token(token):
    try:
        token_hash = hashlib.sha256(token.encode('utf-8')).hexdigest()
        cur = mysql.connection.cursor()
        cur.execute(
            """
            SELECT email, expires_at, used FROM password_resets
            WHERE token_hash=%s
            ORDER BY created_at DESC
            LIMIT 1
            """,
            (token_hash,)
        )
        row = cur.fetchone()
        cur.close()
        if not row:
            return False, None, "invalid"
        email, expires_at, used = row
        if used:
            return False, None, "used"
        if datetime.now() > expires_at:
            return False, None, "expired"
        return True, email, None
    except Exception as e:
        print(f"‚ùå Erreur v√©rification token reset: {e}")
        return False, None, "error"

def _mark_token_used(token):
    try:
        token_hash = hashlib.sha256(token.encode('utf-8')).hexdigest()
        cur = mysql.connection.cursor()
        cur.execute("UPDATE password_resets SET used=1 WHERE token_hash=%s", (token_hash,))
        mysql.connection.commit()
        cur.close()
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur marquage token utilis√©: {e}")

def _send_password_reset_email(email, reset_url):
    subject = "üîê R√©initialisation de mot de passe - SecuriBank"
    body = f"""
Bonjour,

Si vous avez demand√© la r√©initialisation de votre mot de passe, cliquez sur le lien ci-dessous:

{reset_url}

Ce lien est valable 1 heure et ne peut √™tre utilis√© qu'une seule fois.
Si vous n'√™tes pas √† l'origine de cette demande, vous pouvez ignorer cet email.

Cordialement,
L'√©quipe SecuriBank
"""
    msg = MIMEMultipart()
    msg['From'] = SMTP_CONFIG['email']
    msg['To'] = email
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))
    try:
        server = smtplib.SMTP(SMTP_CONFIG['server'], SMTP_CONFIG['port'])
        server.set_debuglevel(1)
        if SMTP_CONFIG.get('use_tls'):
            server.starttls()
        server.login(SMTP_CONFIG['email'], SMTP_CONFIG['password'])
        server.sendmail(SMTP_CONFIG['email'], email, msg.as_string())
        server.quit()
        print(f"üì® Email de reset envoy√© √† {email}")
        print(f"üîó Lien de r√©initialisation g√©n√©r√©: {reset_url}")
        return True
    except Exception as e:
        print(f"‚ùå Erreur envoi email reset: {e}")
        return False
    except smtplib.SMTPRecipientsRefused as e:
        print(f"‚ùå Destinataire refus√©: {e}")
        return False
    except smtplib.SMTPServerDisconnected as e:
        print(f"‚ùå Serveur SMTP d√©connect√©: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur d'envoi de mail: {type(e).__name__}: {e}")
        return False

def envoyer_mail_confirmation_demande(destinataire, nom_complet, prediction_result=None):
    """Envoie un email de confirmation d'enregistrement de demande de cr√©dit"""
    if prediction_result and prediction_result['approved']:
        subject = "‚úÖ Pr√©-approbation de cr√©dit - SecuriBank"
        credit_score = prediction_result.get('credit_score', 'N/A')
        body = f"""
    Bonjour {nom_complet},

    Excellente nouvelle ! Votre demande de cr√©dit a re√ßu une pr√©-approbation automatique.

    üìä R√©sultats de l'analyse IA :
    ‚Ä¢ Score de cr√©dit pr√©dit : {credit_score:.0f}
    ‚Ä¢ Probabilit√© d'approbation : {prediction_result['probability']:.1%}
    ‚Ä¢ Niveau de risque : {prediction_result['risk_level']}
    
    üéØ {prediction_result['message']}
    
    Votre dossier sera finalis√© par nos √©quipes dans les plus brefs d√©lais.

    Cordialement,
    L'√©quipe SecuriBank
    """
    elif prediction_result and not prediction_result['approved']:
        subject = "üìã Demande de cr√©dit - Analyse requise - SecuriBank"
        credit_score = prediction_result.get('credit_score', 'N/A')
        body = f"""
    Bonjour {nom_complet},

    Nous avons bien re√ßu votre demande de cr√©dit.

    üìä R√©sultats de l'analyse IA pr√©liminaire :
    ‚Ä¢ Score de cr√©dit pr√©dit : {credit_score:.0f}
    ‚Ä¢ Probabilit√© d'approbation : {prediction_result['probability']:.1%}
    ‚Ä¢ Niveau de risque : {prediction_result['risk_level']}
    
    üîç {prediction_result['message']}
    
    Votre dossier n√©cessite une √©tude approfondie par nos experts.
    Nous vous r√©pondrons dans les plus brefs d√©lais.

    Cordialement,
    L'√©quipe SecuriBank
    """
    else:
        subject = "Confirmation de demande de cr√©dit - SecuriBank"
        body = f"""
    Bonjour {nom_complet},

    Nous avons bien re√ßu votre demande de cr√©dit.

    Votre dossier est actuellement en cours d'√©tude par nos √©quipes.

    Nous vous r√©pondrons dans les plus brefs d√©lais concernant la suite √† donner √† votre demande.

    En cas de questions, n'h√©sitez pas √† nous contacter.

    Cordialement,
    L'√©quipe SecuriBank
    """

    msg = MIMEMultipart()
    msg['From'] = SMTP_CONFIG['email']
    msg['To'] = destinataire
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))

    try:
        print(f"üîó Connexion au serveur SMTP {SMTP_CONFIG['server']}:{SMTP_CONFIG['port']}")
        server = smtplib.SMTP(SMTP_CONFIG['server'], SMTP_CONFIG['port'])
        server.set_debuglevel(1)  # Active le debug SMTP
        
        if SMTP_CONFIG['use_tls']:
            print("üîê Activation TLS...")
            server.starttls()
        
        print(f"üîë Authentification avec {SMTP_CONFIG['email']}")
        server.login(SMTP_CONFIG['email'], SMTP_CONFIG['password'])
        
        print(f"üì§ Envoi email de confirmation vers {destinataire}")
        server.sendmail(SMTP_CONFIG['email'], destinataire, msg.as_string())
        server.quit()
        print("üì® Email de confirmation envoy√© avec succ√®s.")
        return True
    except smtplib.SMTPAuthenticationError as e:
        print(f"‚ùå Erreur d'authentification SMTP: {e}")
        return False
    except smtplib.SMTPRecipientsRefused as e:
        print(f"‚ùå Destinataire refus√©: {e}")
        return False
    except smtplib.SMTPServerDisconnected as e:
        print(f"‚ùå Serveur SMTP d√©connect√©: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur d'envoi de mail de confirmation: {type(e).__name__}: {e}")
        return False

# üîë Fonctions de gestion OTP
def generer_code_otp():
    """G√©n√®re un code OTP √† 6 chiffres"""
    return ''.join(random.choices(string.digits, k=6))

def sauvegarder_otp(email, code_otp):
    """Sauvegarde le code OTP en base avec expiration de 5 minutes"""
    try:
        cur = mysql.connection.cursor()
        
        # Supprimer les anciens codes pour cet email
        cur.execute("DELETE FROM otp_codes WHERE email = %s", (email,))
        
        # Calculer l'expiration (5 minutes)
        expires_at = datetime.now() + timedelta(minutes=5)
        
        # Ins√©rer le nouveau code
        cur.execute("""
            INSERT INTO otp_codes (email, otp_code, expires_at) 
            VALUES (%s, %s, %s)
        """, (email, code_otp, expires_at))
        
        mysql.connection.commit()
        cur.close()
        print(f"‚úÖ Code OTP sauvegard√© pour {email}")
        return True
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde OTP: {e}")
        return False

def verifier_otp(email, code_saisi):
    """V√©rifie si le code OTP est valide et non expir√©"""
    try:
        cur = mysql.connection.cursor()
        cur.execute("""
            SELECT otp_code, expires_at, is_used 
            FROM otp_codes 
            WHERE email = %s AND is_used = FALSE
            ORDER BY created_at DESC 
            LIMIT 1
        """, (email,))
        
        result = cur.fetchone()
        
        if not result:
            print(f"‚ùå Aucun code OTP trouv√© pour {email}")
            return False, "Aucun code trouv√©"
        
        code_stocke, expires_at, is_used = result
        
        # V√©rifier l'expiration
        if datetime.now() > expires_at:
            print(f"‚ùå Code OTP expir√© pour {email}")
            return False, "Code expir√©"
        
        # V√©rifier le code
        if code_saisi != code_stocke:
            print(f"‚ùå Code OTP incorrect pour {email}")
            return False, "Code incorrect"
        
        # Marquer le code comme utilis√©
        cur.execute("""
            UPDATE otp_codes 
            SET is_used = TRUE 
            WHERE email = %s AND otp_code = %s
        """, (email, code_stocke))
        
        mysql.connection.commit()
        cur.close()
        print(f"‚úÖ Code OTP valid√© pour {email}")
        return True, "Code valide"
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification OTP: {e}")
        return False, "Erreur syst√®me"

def envoyer_code_otp(email, code_otp, nom_utilisateur=""):
    """Envoie le code OTP par email pour la connexion"""
    subject = "üîê Votre code de v√©rification - SecuriBank"
    
    body = f"""
Bonjour {nom_utilisateur},

Voici votre code de v√©rification pour vous connecter √† SecuriBank :

üîë Code : {code_otp}

‚è∞ Ce code est valable pendant 5 minutes seulement.

Si vous n'avez pas demand√© ce code, ignorez ce message.

Cordialement,
L'√©quipe SecuriBank
    """
    
    msg = MIMEMultipart()
    msg['From'] = SMTP_CONFIG['email']
    msg['To'] = email
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))
    
    try:
        print(f"üîó Envoi du code OTP de connexion vers {email}")
        server = smtplib.SMTP(SMTP_CONFIG['server'], SMTP_CONFIG['port'])
        
        if SMTP_CONFIG['use_tls']:
            server.starttls()
        
        server.login(SMTP_CONFIG['email'], SMTP_CONFIG['password'])
        server.sendmail(SMTP_CONFIG['email'], email, msg.as_string())
        server.quit()
        print(f"üì® Code OTP de connexion envoy√© avec succ√®s √† {email}")
        return True
    except Exception as e:
        print(f"‚ùå Erreur envoi OTP connexion: {e}")
        return False

def envoyer_code_otp_inscription(email, code_otp, nom_utilisateur=""):
    """Envoie le code OTP par email pour l'inscription"""
    subject = "üéâ Bienvenue sur SecuriBank - Code de v√©rification"
    
    body = f"""
Bonjour {nom_utilisateur},

Bienvenue sur SecuriBank ! Pour finaliser votre inscription, veuillez saisir le code de v√©rification ci-dessous :

üîë Code : {code_otp}

‚è∞ Ce code est valable pendant 5 minutes seulement.

Une fois votre compte v√©rifi√©, vous pourrez acc√©der √† tous nos services bancaires s√©curis√©s.

Si vous n'avez pas cr√©√© de compte, ignorez ce message.

Cordialement,
L'√©quipe SecuriBank
    """
    
    msg = MIMEMultipart()
    msg['From'] = SMTP_CONFIG['email']
    msg['To'] = email
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))
    
    try:
        print(f"üîó Envoi du code OTP d'inscription vers {email}")
        server = smtplib.SMTP(SMTP_CONFIG['server'], SMTP_CONFIG['port'])
        
        if SMTP_CONFIG['use_tls']:
            server.starttls()
        
        server.login(SMTP_CONFIG['email'], SMTP_CONFIG['password'])
        server.sendmail(SMTP_CONFIG['email'], email, msg.as_string())
        server.quit()
        print(f"üì® Code OTP d'inscription envoy√© avec succ√®s √† {email}")
        return True
    except Exception as e:
        print(f"‚ùå Erreur envoi OTP inscription: {e}")
        return False

# üìù Page d'inscription
@app.route('/signup', methods=['GET', 'POST'])
def signup():
    error = None
    current_language = session.get('language', 'fr')
    if request.method == 'POST':
        name = request.form.get('fullname','').strip()
        email = request.form.get('email','').strip()
        password = request.form.get('password','')
        verifiedpass = request.form.get('confirm','')

        errors = {}
        # Helper: unicode-friendly name validation
        def is_valid_name(s: str) -> bool:
            if len(s) < 3:
                return False
            # Allow letters in any language, spaces, apostrophes and dashes
            allowed_extra = set([" ", "-", "'"])
            if not (s[0].isalpha()):
                return False
            for ch in s:
                if ch.isalpha() or ch in allowed_extra:
                    continue
                return False
            return True

        # Fullname: at least 3 chars, unicode letters, spaces, dashes/apostrophes
        if not is_valid_name(name):
            if current_language == 'ar':
                errors['fullname'] = "Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ÿßÿ≥ŸÖ ÿµÿ≠Ÿäÿ≠ (3 ÿ£ÿ≠ÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ)"
            elif current_language == 'en':
                errors['fullname'] = "Please enter a valid name (at least 3 characters)"
            else:
                errors['fullname'] = "Veuillez saisir un nom valide (au moins 3 caract√®res)"

        # Email basic format
        email_regex = r"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$"
        if not re.match(email_regex, email):
            if current_language == 'ar':
                errors['email'] = "Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ÿ®ÿ±ŸäÿØ ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ÿµÿßŸÑÿ≠"
            elif current_language == 'en':
                errors['email'] = "Please enter a valid email"
            else:
                errors['email'] = "Veuillez saisir un email valide"

        # Password strength
        if len(password) < 8 or not re.search(r"[A-Za-z]", password) or not re.search(r"\d", password):
            if current_language == 'ar':
                errors['password'] = "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿØÿÆÿßŸÑ ŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ŸÇŸàŸäÿ© (8 ÿ£ÿ≠ÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ ÿ™ÿ¥ŸÖŸÑ ÿ≠ÿ±ŸÅŸãÿß Ÿàÿ±ŸÇŸÖŸãÿß)"
            elif current_language == 'en':
                errors['password'] = "Please enter a strong password (min 8 chars with a letter and a number)"
            else:
                errors['password'] = "Veuillez saisir un mot de passe fort (8 caract√®res min avec une lettre et un chiffre)"

        # Confirm match
        if password != verifiedpass:
            if current_language == 'ar':
                errors['confirm'] = "Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ÿ™ÿ∑ÿßÿ®ŸÇ ŸÉŸÑŸÖÿßÿ™ ÿßŸÑŸÖÿ±Ÿàÿ±"
            elif current_language == 'en':
                errors['confirm'] = "Passwords must match"
            else:
                errors['confirm'] = "Les mots de passe doivent correspondre"

        # Email uniqueness
        if 'email' not in errors:
            cur = mysql.connection.cursor()
            cur.execute("SELECT id FROM signup WHERE email = %s", (email,))
            if cur.fetchone():
                if current_language == 'ar':
                    errors['email'] = "ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖŸàÿ¨ŸàÿØ ÿ®ÿßŸÑŸÅÿπŸÑ"
                elif current_language == 'en':
                    errors['email'] = "User already exists"
                else:
                    errors['email'] = "Utilisateur d√©j√† existant"

        if errors:
            # Return with field-specific errors and preserve name/email
            form_data = {'fullname': name, 'email': email}
            return render_template('signup.html', error=None, errors=errors, form_data=form_data, current_language=current_language), 400

        # ‚úÖ Nouveau processus d'inscription avec OTP si aucune erreur
        hashed = generate_password_hash(password)
        session['pending_signup'] = {
            'name': name,
            'email': email,
            'password': hashed
        }

        code_otp = generer_code_otp()
        if sauvegarder_otp(email, code_otp) and envoyer_code_otp_inscription(email, code_otp, name):
            print(f"üîë Code OTP d'inscription g√©n√©r√© et envoy√© pour {email}")
            return redirect(url_for('verify_signup_otp'))
        else:
            if current_language == 'ar':
                error = "ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ŸÖÿ≤ ÿßŸÑÿ™ÿ≠ŸÇŸÇ"
            elif current_language == 'en':
                error = "Error sending verification code"
            else:
                error = "Erreur lors de l'envoi du code de v√©rification"
    return render_template('signup.html', error=error, current_language=current_language)

# üîê Page de connexion
@app.route('/login', methods=['GET', 'POST'])
def login():
    error = None
    success = None
    current_language = session.get('language', 'fr')
    
    # V√©rifier s'il y a un message de succ√®s d'inscription
    if session.pop('signup_success', False):
        if current_language == 'ar':
            success = "ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ®ŸÉ ÿ®ŸÜÿ¨ÿßÿ≠! ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿ¢ŸÜ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ"
        elif current_language == 'en':
            success = "Account created successfully! You can now log in"
        else:
            success = "Compte cr√©√© avec succ√®s ! Vous pouvez maintenant vous connecter"
    
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        cur = mysql.connection.cursor()
        cur.execute("SELECT * FROM signup WHERE email = %s", (email,))
        user = cur.fetchone()
        
        if user and check_password_hash(user[3], password):
            # ‚úÖ Identifiants corrects - G√©n√©rer et envoyer code OTP
            code_otp = generer_code_otp()
            nom_utilisateur = user[1]  # Le nom est dans la colonne 1
            
            if sauvegarder_otp(email, code_otp) and envoyer_code_otp(email, code_otp, nom_utilisateur):
                # Stocker l'email en session temporairement pour la v√©rification OTP
                session['pending_login'] = email
                print(f"üîë Code OTP g√©n√©r√© et envoy√© pour {email}")
                return redirect(url_for('verify_otp'))
            else:
                if current_language == 'ar':
                    error = "ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ŸÖÿ≤ ÿßŸÑÿ™ÿ≠ŸÇŸÇ"
                elif current_language == 'en':
                    error = "Error sending verification code"
                else:
                    error = "Erreur lors de l'envoi du code de v√©rification"
        else:
            if current_language == 'ar':
                error = "ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿßÿπÿ™ŸÖÿßÿØ ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©"
            elif current_language == 'en':
                error = "Invalid credentials"
            else:
                error = "Identifiants incorrects"
    return render_template('login.html', error=error, success=success, current_language=current_language)

# üîê Page de v√©rification OTP
@app.route('/verify_otp', methods=['GET', 'POST'])
def verify_otp():
    # V√©rifier qu'il y a une connexion en attente
    if 'pending_login' not in session:
        return redirect(url_for('login'))
    
    error = None
    success = None
    current_language = session.get('language', 'fr')
    email = session['pending_login']
    
    if request.method == 'POST':
        code_saisi = request.form['otp_code'].strip()
        
        if len(code_saisi) != 6 or not code_saisi.isdigit():
            if current_language == 'ar':
                error = "Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÉŸàŸÜ ÿßŸÑÿ±ŸÖÿ≤ ŸÖŸÉŸàŸÜ ŸÖŸÜ 6 ÿ£ÿ±ŸÇÿßŸÖ"
            elif current_language == 'en':
                error = "Code must be 6 digits"
            else:
                error = "Le code doit contenir 6 chiffres"
        else:
            # V√©rifier le code OTP
            is_valid, message = verifier_otp(email, code_saisi)
            
            if is_valid:
                # ‚úÖ Code valide - Connexion r√©ussie
                session['user'] = email
                session.pop('pending_login', None)  # Nettoyer la session temporaire
                print(f"‚úÖ Connexion r√©ussie avec OTP pour {email}")
                return redirect(url_for('accueil'))
            else:
                # ‚ùå Code invalide
                if message == "Code expir√©":
                    if current_language == 'ar':
                        error = "ÿßŸÜÿ™Ÿáÿ™ ÿµŸÑÿßÿ≠Ÿäÿ© ÿßŸÑÿ±ŸÖÿ≤. Ÿäÿ±ÿ¨Ÿâ ÿ∑ŸÑÿ® ÿ±ŸÖÿ≤ ÿ¨ÿØŸäÿØ"
                    elif current_language == 'en':
                        error = "Code expired. Please request a new code"
                    else:
                        error = "Code expir√©. Veuillez demander un nouveau code"
                elif message == "Code incorrect":
                    if current_language == 'ar':
                        error = "ÿ±ŸÖÿ≤ ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠"
                    elif current_language == 'en':
                        error = "Invalid code"
                    else:
                        error = "Code incorrect"
                else:
                    if current_language == 'ar':
                        error = "ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ±ŸÖÿ≤"
                    elif current_language == 'en':
                        error = "Error verifying code"
                    else:
                        error = "Erreur lors de la v√©rification du code"
    
    return render_template('verify_otp.html', error=error, success=success, 
                         current_language=current_language, email=email)

# üîÑ Renvoyer un nouveau code OTP
@app.route('/resend_otp', methods=['POST'])
def resend_otp():
    if 'pending_login' not in session:
        return redirect(url_for('login'))
    
    email = session['pending_login']
    current_language = session.get('language', 'fr')
    
    # R√©cup√©rer le nom de l'utilisateur
    cur = mysql.connection.cursor()
    cur.execute("SELECT name FROM signup WHERE email = %s", (email,))
    user = cur.fetchone()
    nom_utilisateur = user[0] if user else ""
    
    # G√©n√©rer et envoyer un nouveau code
    code_otp = generer_code_otp()
    
    if sauvegarder_otp(email, code_otp) and envoyer_code_otp(email, code_otp, nom_utilisateur):
        if current_language == 'ar':
            success = "ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ŸÖÿ≤ ÿ¨ÿØŸäÿØ"
        elif current_language == 'en':
            success = "New code sent"
        else:
            success = "Nouveau code envoy√©"
        
        return render_template('verify_otp.html', success=success, 
                             current_language=current_language, email=email)
    else:
        if current_language == 'ar':
            error = "ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ŸÖÿ≤"
        elif current_language == 'en':
            error = "Error sending code"
        else:
            error = "Erreur lors de l'envoi du code"
        
        return render_template('verify_otp.html', error=error, 
                             current_language=current_language, email=email)

# üîê Page de v√©rification OTP pour l'inscription
@app.route('/verify_signup_otp', methods=['GET', 'POST'])
def verify_signup_otp():
    # V√©rifier qu'il y a une inscription en attente
    if 'pending_signup' not in session:
        return redirect(url_for('signup'))
    
    error = None
    success = None
    current_language = session.get('language', 'fr')
    signup_data = session['pending_signup']
    email = signup_data['email']
    
    if request.method == 'POST':
        code_saisi = request.form['otp_code'].strip()
        
        if len(code_saisi) != 6 or not code_saisi.isdigit():
            if current_language == 'ar':
                error = "Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÉŸàŸÜ ÿßŸÑÿ±ŸÖÿ≤ ŸÖŸÉŸàŸÜ ŸÖŸÜ 6 ÿ£ÿ±ŸÇÿßŸÖ"
            elif current_language == 'en':
                error = "Code must be 6 digits"
            else:
                error = "Le code doit contenir 6 chiffres"
        else:
            # V√©rifier le code OTP
            is_valid, message = verifier_otp(email, code_saisi)
            
            if is_valid:
                # ‚úÖ Code valide - Finaliser l'inscription
                try:
                    cur = mysql.connection.cursor()
                    cur.execute("INSERT INTO signup (name, email, password) VALUES (%s, %s, %s)", 
                              (signup_data['name'], signup_data['email'], signup_data['password']))
                    mysql.connection.commit()
                    cur.close()
                    
                    # Nettoyer la session
                    session.pop('pending_signup', None)
                    
                    print(f"‚úÖ Inscription finalis√©e avec OTP pour {email}")
                    
                    # Rediriger vers la page de connexion avec un message de succ√®s
                    session['signup_success'] = True
                    return redirect(url_for('login'))
                    
                except Exception as e:
                    print(f"‚ùå Erreur lors de la finalisation de l'inscription: {e}")
                    if current_language == 'ar':
                        error = "ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ≠ÿ≥ÿßÿ®"
                    elif current_language == 'en':
                        error = "Error creating account"
                    else:
                        error = "Erreur lors de la cr√©ation du compte"
            else:
                # ‚ùå Code invalide
                if message == "Code expir√©":
                    if current_language == 'ar':
                        error = "ÿßŸÜÿ™Ÿáÿ™ ÿµŸÑÿßÿ≠Ÿäÿ© ÿßŸÑÿ±ŸÖÿ≤. Ÿäÿ±ÿ¨Ÿâ ÿ∑ŸÑÿ® ÿ±ŸÖÿ≤ ÿ¨ÿØŸäÿØ"
                    elif current_language == 'en':
                        error = "Code expired. Please request a new code"
                    else:
                        error = "Code expir√©. Veuillez demander un nouveau code"
                elif message == "Code incorrect":
                    if current_language == 'ar':
                        error = "ÿ±ŸÖÿ≤ ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠"
                    elif current_language == 'en':
                        error = "Invalid code"
                    else:
                        error = "Code incorrect"
                else:
                    if current_language == 'ar':
                        error = "ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ±ŸÖÿ≤"
                    elif current_language == 'en':
                        error = "Error verifying code"
                    else:
                        error = "Erreur lors de la v√©rification du code"
    
    return render_template('verify_signup_otp.html', error=error, success=success, 
                         current_language=current_language, email=email, 
                         name=signup_data['name'])

# üîÑ Renvoyer un nouveau code OTP pour l'inscription
@app.route('/resend_signup_otp', methods=['POST'])
def resend_signup_otp():
    if 'pending_signup' not in session:
        return redirect(url_for('signup'))
    
    signup_data = session['pending_signup']
    email = signup_data['email']
    name = signup_data['name']
    current_language = session.get('language', 'fr')
    
    # G√©n√©rer et envoyer un nouveau code
    code_otp = generer_code_otp()
    
    if sauvegarder_otp(email, code_otp) and envoyer_code_otp_inscription(email, code_otp, name):
        if current_language == 'ar':
            success = "ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ŸÖÿ≤ ÿ¨ÿØŸäÿØ"
        elif current_language == 'en':
            success = "New code sent"
        else:
            success = "Nouveau code envoy√©"
        
        return render_template('verify_signup_otp.html', success=success, 
                             current_language=current_language, email=email, name=name)
    else:
        if current_language == 'ar':
            error = "ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ŸÖÿ≤"
        elif current_language == 'en':
            error = "Error sending code"
        else:
            error = "Erreur lors de l'envoi du code"
        
        return render_template('verify_signup_otp.html', error=error, 
                             current_language=current_language, email=email, name=name)

# =======================
# Password reset routes
# =======================
@app.route('/forgot_password', methods=['GET', 'POST'])
def forgot_password():
    current_language = session.get('language', 'fr')
    message = None
    error = None
    dev_reset_url = None
    if request.method == 'POST':
        email = request.form.get('email', '').strip()
        submitted_email = email
        # Normaliser en minuscule pour √©viter les probl√®mes de casse
        email = email.lower()
        # Always respond generically
        message_fr = "Si un compte existe pour cet e-mail, vous recevrez un lien de r√©initialisation."
        message_en = "If an account exists for this email, you will receive a reset link."
        message_ar = "ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸáŸÜÿßŸÉ ÿ≠ÿ≥ÿßÿ® ŸÑŸáÿ∞ÿß ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿå ÿ≥ÿ™ÿ™ŸÑŸÇŸâ ÿ±ÿßÿ®ÿ∑ ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ÿπŸäŸäŸÜ."
        message = message_fr if current_language == 'fr' else (message_en if current_language == 'en' else message_ar)

        try:
            cur = mysql.connection.cursor()
            cur.execute("SELECT id FROM signup WHERE LOWER(email)=LOWER(%s)", (email,))
            user = cur.fetchone()
            cur.close()
            if user:
                print(f"‚úÖ Compte trouv√© pour l'email soumis: {submitted_email}")
                token, token_hash = _generate_reset_token()
                if _save_reset_token(email, token_hash):
                    reset_url = url_for('reset_password', token=token, _external=True)
                    print(f"üîó Lien de reset (server log): {reset_url}")
                    _send_password_reset_email(email, reset_url)
                    if app.config.get('SHOW_RESET_LINK_DEBUG'):
                        dev_reset_url = reset_url
                else:
                    print("‚ùå √âchec sauvegarde du token reset en base")
            else:
                print(f"‚ÑπÔ∏è Aucun compte trouv√© pour: {submitted_email}")
        except Exception as e:
            print(f"‚ö†Ô∏è forgot_password process error: {e}")
        # Always render with generic message
        return render_template('forgot_password.html', message=message, current_language=current_language, dev_reset_url=dev_reset_url)
    return render_template('forgot_password.html', message=message, current_language=current_language, dev_reset_url=dev_reset_url)

@app.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    current_language = session.get('language', 'fr')
    error = None
    success = None
    is_valid, email, reason = _verify_reset_token(token)
    if not is_valid:
        # Do not disclose details, but adapt message per language
        if current_language == 'ar':
            error = "ÿ±ÿßÿ®ÿ∑ ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ ÿ£Ÿà ŸÖŸÜÿ™ŸáŸä ÿßŸÑÿµŸÑÿßÿ≠Ÿäÿ©"
        elif current_language == 'en':
            error = "Invalid or expired link"
        else:
            error = "Lien invalide ou expir√©"
        return render_template('reset_password.html', error=error, current_language=current_language, token_invalid=True)

    if request.method == 'POST':
        pwd1 = request.form.get('password')
        pwd2 = request.form.get('confirm')
        if not pwd1 or len(pwd1) < 6 or pwd1 != pwd2:
            if current_language == 'ar':
                error = "ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ© ÿ£Ÿà ÿ∫Ÿäÿ± ŸÖÿ™ÿ∑ÿßÿ®ŸÇÿ©"
            elif current_language == 'en':
                error = "Invalid or mismatched password"
            else:
                error = "Mot de passe invalide ou non concordant"
        else:
            try:
                cur = mysql.connection.cursor()
                cur.execute("UPDATE signup SET password=%s WHERE email=%s", (generate_password_hash(pwd1), email))
                mysql.connection.commit()
                cur.close()
                _mark_token_used(token)
                if current_language == 'ar':
                    success = "ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ®ŸÜÿ¨ÿßÿ≠"
                elif current_language == 'en':
                    success = "Password updated successfully"
                else:
                    success = "Mot de passe mis √† jour avec succ√®s"
                return render_template('reset_password.html', success=success, current_language=current_language, done=True)
            except Exception as e:
                print(f"‚ùå Erreur maj mot de passe: {e}")
                if current_language == 'ar':
                    error = "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£. ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ"
                elif current_language == 'en':
                    error = "An error occurred. Please try again"
                else:
                    error = "Une erreur s'est produite. Veuillez r√©essayer"
    return render_template('reset_password.html', error=error, current_language=current_language)

# üìù Formulaire de demande de cr√©dit
@app.route("/demande_credit", methods=["GET", "POST"])
def demande_credit():
    if "user" not in session:
        return redirect(url_for("login"))

    current_language = session.get('language', 'fr')
    print(f"üåê Page demande_credit - Langue actuelle: {current_language}")
    success, error = None, None

    if request.method == "POST":
        print("üöÄ R√©ception d'une demande POST sur /demande_credit")
        print(f"üìã Donn√©es re√ßues: {len(request.form)} champs")
        for key, value in request.form.items():
            if value:  # Afficher seulement les champs non vides
                print(f"  {key}: {value}")
        
        try:
            # R√©cup√©ration des champs saisis par le client (11 champs)
            name = request.form.get("Name")
            age = request.form.get("Age")
            ssn = request.form.get("SSN")
            occupation = request.form.get("Occupation")
            annual_income = request.form.get("Annual_Income")
            monthly_salary = request.form.get("Monthly_Inhand_Salary")
            num_bank_accounts = request.form.get("Num_Bank_Accounts", "1")
            num_credit_card = request.form.get("Num_Credit_Card", "0")
            num_of_loan = request.form.get("Num_of_Loan", "0")
            type_of_loan = request.form.get("Type_of_Loan", "Not Specified")
            amount_invested_monthly = request.form.get("Amount_invested_monthly", "0")
            
            # Validation des champs obligatoires
            if not all([name, age, ssn, occupation, annual_income, monthly_salary]):
                error = "Veuillez remplir tous les champs obligatoires."
                return render_template("demande_credit.html", success=success, error=error, current_language=current_language)
            
            # G√©n√©ration des champs automatiques (17 champs)
            import random
            from datetime import datetime
            
            # ID et Customer_ID g√©n√©r√©s automatiquement
            customer_id = random.randint(100000, 999999)
            
            # Month bas√© sur le mois actuel
            current_month = datetime.now().strftime("%B")
            
            # Champs calcul√©s avec des valeurs par d√©faut r√©alistes
            interest_rate = round(random.uniform(8.0, 15.0), 1)
            delay_from_due_date = random.randint(0, 30)
            num_delayed_payment = random.randint(0, 5)
            changed_credit_limit = random.randint(-1000, 2000)
            num_credit_inquiries = random.randint(1, 8)
            
            # Credit Mix bas√© sur le profil
            credit_mix_options = ["Standard", "Good", "Bad"]
            credit_mix = random.choice(credit_mix_options)
            
            # Outstanding Debt bas√© sur le revenu
            try:
                income = float(annual_income) if annual_income else 50000
                outstanding_debt = round(random.uniform(0, income * 0.3), 2)
            except:
                outstanding_debt = 0
            
            # Credit Utilization Ratio
            credit_utilization_ratio = round(random.uniform(10.0, 60.0), 1)
            
            # Credit History Age
            credit_history_age = round(random.uniform(1.0, 15.0), 1)
            
            # Payment of Min Amount
            payment_min_amount = random.choice(["Yes", "No", "NM"])
            
            # Total EMI per month
            total_emi_per_month = round(random.uniform(0, 2000), 2)
            
            # Payment Behaviour
            payment_behaviours = [
                "Low_spent_Medium_value_payments",
                "High_spent_Small_value_payments", 
                "Low_spent_Large_value_payments",
                "High_spent_Medium_value_payments",
                "High_spent_Large_value_payments",
                "Low_spent_Small_value_payments"
            ]
            payment_behaviour = random.choice(payment_behaviours)
            
            # Monthly Balance
            try:
                salary = float(monthly_salary) if monthly_salary else 3000
                monthly_balance = round(random.uniform(salary * 0.1, salary * 0.8), 2)
            except:
                monthly_balance = 1000
            
            print(f"üìä Donn√©es pr√©par√©es pour le mod√®le:")
            print(f"   üë§ Client: {name}, {age} ans")
            print(f"   üí∞ Revenus: {annual_income}/an, {monthly_salary}/mois")
            print(f"   üè¶ Comptes: {num_bank_accounts} bancaires, {num_credit_card} cartes")
            print(f"   üìà Investissements: {amount_invested_monthly}/mois")
            
            # Pr√©paration des donn√©es pour le mod√®le
            form_data = {
                'Month': current_month,
                'Name': name,
                'Age': age,
                'SSN': ssn,
                'Occupation': occupation,
                'Annual_Income': annual_income,
                'Monthly_Inhand_Salary': monthly_salary,
                'Num_Bank_Accounts': num_bank_accounts,
                'Num_Credit_Card': num_credit_card,
                'Interest_Rate': str(interest_rate),
                'Num_of_Loan': num_of_loan,
                'Type_of_Loan': type_of_loan,
                'Delay_from_due_date': str(delay_from_due_date),
                'Num_of_Delayed_Payment': str(num_delayed_payment),
                'Changed_Credit_Limit': str(changed_credit_limit),
                'Num_Credit_Inquiries': str(num_credit_inquiries),
                'Credit_Mix': credit_mix,
                'Outstanding_Debt': str(outstanding_debt),
                'Credit_Utilization_Ratio': str(credit_utilization_ratio),
                'Credit_History_Age': str(credit_history_age),
                'Payment_of_Min_Amount': payment_min_amount,
                'Total_EMI_per_month': str(total_emi_per_month),
                'Amount_invested_monthly': amount_invested_monthly,
                'Payment_Behaviour': payment_behaviour,
                'Monthly_Balance': str(monthly_balance)
            }

            # ü§ñ Pr√©diction automatique du cr√©dit
            prediction_result = credit_predictor.predict_credit_approval(form_data)
            print(f"ü§ñ R√©sultat de la pr√©diction pour {name}: {prediction_result}")
            
            # Insertion en base avec tous les nouveaux champs
            cur = mysql.connection.cursor()
            cur.execute("""
                INSERT INTO Clients (
                    Customer_ID, Month, Name, Age, SSN, Occupation, Annual_Income, Monthly_Inhand_Salary,
                    Num_Bank_Accounts, Num_Credit_Card, Interest_Rate, Num_of_Loan, Type_of_Loan,
                    Delay_from_due_date, Num_of_Delayed_Payment, Changed_Credit_Limit, Num_Credit_Inquiries,
                    Credit_Mix, Outstanding_Debt, Credit_Utilization_Ratio, Credit_History_Age,
                    Payment_of_Min_Amount, Total_EMI_per_month, Amount_invested_monthly, Payment_Behaviour,
                    Monthly_Balance, Credit_Score
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                customer_id, current_month, name, age, ssn, occupation, annual_income, monthly_salary,
                num_bank_accounts, num_credit_card, interest_rate, num_of_loan, type_of_loan,
                delay_from_due_date, num_delayed_payment, changed_credit_limit, num_credit_inquiries,
                credit_mix, outstanding_debt, credit_utilization_ratio, credit_history_age,
                payment_min_amount, total_emi_per_month, amount_invested_monthly, payment_behaviour,
                monthly_balance, prediction_result.get('credit_score', 0)
            ))
            mysql.connection.commit()
            cur.close()
            
            print(f"‚úÖ Demande enregistr√©e en base pour {name}")
            
            # Message de succ√®s bas√© sur la pr√©diction
            if prediction_result.get('approved', False):
                success = f"‚úÖ F√©licitations ! Votre demande a √©t√© pr√©-approuv√©e automatiquement !\nüéØ {prediction_result.get('message', '')}\nüìß Un email de confirmation vous a √©t√© envoy√©."
            else:
                success = f"üìù Votre demande a √©t√© enregistr√©e et sera √©tudi√©e par nos experts.\nüìä {prediction_result.get('message', '')}\nüìß Un email de confirmation vous a √©t√© envoy√©."
            
        except Exception as e:
            print(f"‚ùå Erreur lors du traitement: {e}")
            import traceback
            traceback.print_exc()
            error = f"‚ùå Erreur lors de l'envoi : {str(e)}"
    
    return render_template("demande_credit.html", success=success, error=error, current_language=current_language)


# üè† Page d'accueil
@app.route('/accueil')
def accueil():
    current_language = session.get('language', 'fr')
    print(f"üåê Page accueil - Langue actuelle: {current_language}")
    return render_template('accueil.html', current_language=current_language)

# Route racine qui redirige vers accueil
@app.route('/')
def index():
    return redirect(url_for('accueil'))

@app.route('/formulaire', methods=['GET', 'POST'])
def formulaire():
    if 'user' not in session:
        return redirect(url_for('login'))

    current_language = session.get('language', 'fr')
    data = None
    error_popup = None

    if request.method == 'POST':
        file = request.files['image']
        email_utilisateur = request.form.get('email')  # r√©cup√®re l'email du formulaire

        if file:
            filename = f"cin_{uuid.uuid4().hex}.jpg"
            cin_path = os.path.join(UPLOAD_FOLDER, filename)
            file.save(cin_path)
            session['cin_path'] = cin_path

            try:
                cin, nom, prenom, date = extraire_donnees(cin_path)
                nom_complet = f"{prenom} {nom}"
                data = {
                    'cin': cin,
                    'nom': nom,
                    'prenom': prenom,
                    'date': date
                }

                # üîç V√©rification AML
                result = check_name(nom_complet)
                if not result.empty:
                    envoyer_mail(email_utilisateur, nom_complet)
                    error_popup = "‚ùå Votre nom figure sur une liste AML. Vous ne pouvez pas obtenir un cr√©dit."
                    return render_template('formulaire.html', data=data, error_popup=error_popup, current_language=current_language)
                print(f"üß™ R√©sultat AML pour '{nom_complet}' : {result}")


            except ValueError:
                error_popup = "‚ùå This is not a Tunisian ID card. Please upload a valid document."

    return render_template('formulaire.html', data=data, error_popup=error_popup, current_language=current_language)


@app.route('/save', methods=['POST'])
def save():
    cin = request.form['cin']
    nom = request.form['nom']
    prenom = request.form['prenom']
    date = request.form['date']
    email = request.form['email']
    nom_complet = f"{prenom} {nom}"

    print(f"üß™ Comparaison AML d√©clench√©e pour : {nom_complet}")
    result = check_name(nom_complet)
    print(f"üß™ R√©sultat AML : {result}")

    if not result.empty:
        envoyer_mail(email, nom_complet)
        error_popup = "‚ùå Ce nom figure sur une liste AML. Cr√©dit refus√©."
        data = {
            'cin': cin,
            'nom': nom,
            'prenom': prenom,
            'date': date
        }
        return render_template('formulaire.html', data=data, error_popup=error_popup)

    # ‚úÖ Si tout est bon, redirige vers demande_credit
    return redirect(url_for('demande_credit'))



# üß† V√©rification faciale
@app.route('/verify_face', methods=['POST'])
def verify_face():
    data = request.get_json()
    image_data = data['image'].split(',')[1]
    image_bytes = base64.b64decode(image_data)

    try:
        live_image = Image.open(BytesIO(image_bytes)).convert("RGB")
    except Exception as e:
        return jsonify({'message': f'‚ùå Erreur lors du traitement de l‚Äôimage captur√©e : {str(e)}'}), 400

    live_filename = f"live_{uuid.uuid4().hex}.jpg"
    live_path = os.path.join(UPLOAD_FOLDER, live_filename)
    live_image.save(live_path)

    cin_path = session.get('cin_path')
    if not cin_path or not os.path.exists(cin_path):
        return jsonify({'message': "‚ùå Image CIN introuvable. Veuillez d'abord l'uploader."}), 400

    # V√©rifie que les deux images sont lisibles
    if cv2.imread(cin_path) is None:
        return jsonify({'message': "‚ùå L‚Äôimage CIN est illisible ou corrompue."}), 400
    if cv2.imread(live_path) is None:
        return jsonify({'message': "‚ùå L‚Äôimage live est illisible ou corrompue."}), 400

    try:
        result = DeepFace.verify(
            img1_path=cin_path,
            img2_path=live_path,
            model_name='VGG-Face',
            detector_backend='opencv'
        )
        distance = result.get("distance", None)
        threshold = result.get("threshold", None)

        if result["verified"]:
            message = "‚úÖ Identity confirmed"
        elif distance is not None and threshold is not None:
            message = f"‚ùå Not the same person"
        else:
            message = "‚ùå Face not recognized"

        return jsonify({'message': message})
    except Exception as e:
        traceback_str = traceback.format_exc()
        print("‚ùå Trace compl√®te DeepFace :", traceback_str)
        return jsonify({'message': f'‚ùå Erreur DeepFace : {str(e)}'}), 500

# üîì D√©connexion
@app.route('/logout')
def logout():
    session.pop('user', None)
    session.pop('cin_path', None)
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)
